trigger:
  branches:
    include:
      - main

variables:
  dockerImageName: flask-ec2-app

pool:
  vmImage: 'ubuntu-latest'

steps:

# Step 1: Checkout code
- task: Checkout@1

# Step 2: Build Docker image locally (no Docker Hub needed)
- script: |
    docker build -t $(dockerImageName):latest .
  displayName: 'Build Docker Image'

# Step 3: Save image as a tar file
- script: |
    docker save -o $(dockerImageName).tar $(dockerImageName):latest
  displayName: 'Save Docker Image to tar'

# Step 4: Publish the image tar as a pipeline artifact
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(dockerImageName).tar'
    ArtifactName: 'docker-image'
    publishLocation: 'Container'

# Step 5: Deploy via SSH to EC2 (replace with your actual IP)
- task: CopyFilesOverSSH@0
  inputs:
    sshEndpoint: 'EC2-SSH'   # Make sure your service connection is named exactly this
    sourceFolder: '$(System.DefaultWorkingDirectory)'
    contents: '**/*.tar'
    targetFolder: '/home/ec2-user'

- task: SSH@0
  inputs:
    sshEndpoint: 'EC2-SSH'
    runOptions: 'commands'
    commands: |
      docker load -i /home/ec2-user/$(dockerImageName).tar
      docker stop flask-container || true
      docker rm flask-container || true
      docker run -d -p 80:80 --name flask-container $(dockerImageName):latest
    workingDirectory: '/home/ec2-user'
